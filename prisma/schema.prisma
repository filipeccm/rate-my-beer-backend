generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Beer {
  id         Int                 @id @default(sequence())
  name       String?
  abv        Float?
  ibu        Int?
  srm        Int?
  upc        Int?
  descript   String?
  brewery_id Int?
  cat_id     Int?
  style_id   Int?
  createdat  DateTime            @default(now()) @db.Timestamptz(6)
  updatedat  DateTime            @default(now()) @db.Timestamptz(6)
  likedBy    UsersBeersLikes[]
  ratings    UsersBeersRatings[]
  breweries  Brewery?            @relation(fields: [brewery_id], references: [id], onUpdate: NoAction, map: "brewery_id_link")
  categories Category?           @relation(fields: [cat_id], references: [id], onUpdate: NoAction, map: "cat_id_link")
  styles     Style?              @relation(fields: [style_id], references: [id], onUpdate: NoAction, map: "style_id_link")

  @@map("beers")
}

model Brewery {
  id        Int      @id @default(sequence())
  name      String?
  address1  String?
  address2  String?
  city      String?
  state     String?
  code      String?
  country   String?
  phone     String?
  website   String?
  filepath  String?
  descript  String?
  createdat DateTime @default(now()) @db.Timestamptz(6)
  updatedat DateTime @default(now()) @db.Timestamptz(6)
  beers     Beer[]

  @@map("breweries")
}

model Category {
  id        Int      @id @default(sequence())
  cat_name  String?
  createdat DateTime @default(now()) @db.Timestamptz(6)
  updatedat DateTime @default(now()) @db.Timestamptz(6)
  beers     Beer[]
  styles    Style[]

  @@map("categories")
}

model Style {
  id         Int      @id @default(sequence())
  style_name String?
  cat_id     Int
  createdat  DateTime @default(now()) @db.Timestamptz(6)
  updatedat  DateTime @default(now()) @db.Timestamptz(6)
  beers      Beer[]
  categories Category @relation(fields: [cat_id], references: [id], onUpdate: NoAction, map: "cat_id_link")

  @@map("styles")
}

model User {
  id         Int                 @id @default(sequence())
  createdat  DateTime            @default(now()) @db.Timestamptz(6)
  updatedat  DateTime            @default(now()) @db.Timestamptz(6)
  name       String
  email      String              @unique(map: "users__pgroll_new_email_key")
  hash       String
  likedBeers UsersBeersLikes[]
  ratedBeers UsersBeersRatings[]
  role       Role                @default(USER)

  @@map("users")
}

model UsersBeersLikes {
  userId Int
  beerId Int
  beer   Beer @relation(fields: [beerId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, beerId])
}

model UsersBeersRatings {
  userId Int
  beerId Int
  rating Int
  beer   Beer @relation(fields: [beerId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, beerId])
}

enum Role {
  ADMIN
  USER
}
